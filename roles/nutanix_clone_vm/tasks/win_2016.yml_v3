---

#- name: assigning Nutanix variables
#  set_fact:
#    base_url: "https://{{ cluster_ip }}:{{ nutanix_port }}/PrismGateway/services/rest/v2.0"
#    upload_base_url: "https://{{ cluster_ip }}:{{ nutanix_port }}"
#    username: "{{ nutanix_user }}"
#    password: "{{ nutanix_pw }}"
#    vm_uuid: "{{ win2016_uuids[cluster_name] }}"
##    vm_uuid: "ce927db3-a970-4578-beed-207fb3a8f9bd"  #Test template
#    vlan: "{{ vlan_uuid }}"
#    storage_container: "{{ storage_containers[cluster_name] }}"

- name: assigning Nutanix variables
  set_fact:
    central_base_url: "https://{{ central_addr }}:{{ nutanix_port }}/api/nutanix/v3"
    upload_base_url: "https://{{ cluster_ip }}:{{ nutanix_port }}"
    storage_container: "{{ storage_containers[cluster_name] }}"

- name: create {{ datacenter }} {{ vm_env }} nutanix VM {{ vm_os }}
  debug:
    msg:
    - "vm_name: {{ vm_name }}"
    - "vm_os: {{ vm_os }}"
    - "vm_env: {{ vm_env }}"
    - "datacenter: {{ datacenter }}"
    - "domain: {{ domain }}"
    - "vm_memory_mb: {{ vm_memory }}"
    - "vm_cpu: {{ vm_cpu }}"
    - "central_base_url: {{ central_base_url }}"
    - "username: {{ nutanix_user }}"


- name: search for image_name in os_image_service
  set_fact:
    image_name: "{{ item['target_image_name'] }}"
  with_items: "{{ os_image_service['images'] }}"
  when: "'{{ vm_os }}' in item.target_image_name"

- name: get QCOW disk image
  uri:
    url: "{{ central_base_url }}/images/list"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 200
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
    body:
      filter: "name=={{ image_name }}"
    body_format: json
  register: image_result

- name: debug image search result
  debug:
    msg:  "image_result {{ image_result.content | from_json }}"

- name: set fact on image result in json format
  set_fact:
    image_list: "{{ ( image_result.content | from_json )['entities'] }}"

- name: fail when image_list != 1
  fail:
    msg: "NO IMAGES FOUND"
  when: image_list | length != 1

- name: setting fact of image_uuid
  set_fact:
    image_uuid: "{{ ( image_result.content | from_json )['entities'][0].metadata.uuid }}"

- name: debugging image_uuid
  debug:
    msg:
    - "image_uuid: {{ image_uuid }}"

- name: create VM
  uri:
    url: "{{ central_base_url }}/vms"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 202
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
    body: |
      {
         "spec": {
            "description": "{{ snow_requester_email }}; {{ vm_os }}; {{ snow_requester_fname }} {{ snow_requester_lname }}",
            "resources": {
               "num_threads_per_core": 1,
               "power_state": "OFF",
               "num_vcpus_per_socket": {{ vm_cpu }},
               "num_sockets": 1,
               "memory_size_mib": {{ vm_memory }},
               "hardware_clock_timezone": "{{ hw_time_zone }}",
               "disk_list": [
                  {
                     "data_source_reference": {
                        "kind": "image",
                        "uuid": "{{ image_uuid }}"
                     },
                     "device_properties": {
                        "disk_address": {
                           "device_index": 0,
                           "adapter_type": "SCSI"
                        },
                        "device_type": "DISK"
                     }
                  }
               ],
               "guest_os_id": "{{ vm_os }}"
            },
            "cluster_reference": {
               "kind": "cluster",
               "name": "{{ cluster_name }}",
               "uuid": "{{ cluster_uuid }}"
            },
            "name": "{{ vm_name }}"
         },
         "api_version": "3.1.0",
         "metadata": {
            "kind": "vm",
            "spec_version": 1
         }
      }
    body_format: json
  register: deploy_result

- name: pause a few seconds
  pause:
    seconds: 2

- name: debug the return of the king - vm creation
  debug:
    msg: "{{ deploy_result.json }}"

- name: debug the task_uuid from new VM creation
  set_fact:
    task_uuid: "{{ deploy_result.json.status.execution_context.task_uuid }}"

- name: debug task uuid
  debug:
    msg: "VM creation task uuid - {{task_uuid}}"

- name: pause a few seconds
  pause:
    seconds: 5


- name: get VM task
  uri:
    url: "{{ central_base_url }}/tasks/{{ task_uuid }}"
    validate_certs: no
    force_basic_auth: yes
    method: GET
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
  register: create_vm_task_result

- name: pause a few seconds
  pause:
    seconds: 5

- name: set fact task result
  set_fact:
    new_vm_task_result: "{{ create_vm_task_result.content | from_json }}"


- name: set fact task result
  set_fact:
    new_vm_uuid: "{{ new_vm_task_result['entity_reference_list'][0]['uuid'] }}"
  when: new_vm_task_result['entity_reference_list'] | length == 1

- name: show task result
  debug:
    msg:
    - "new_vm_uuid: {{ new_vm_uuid }}"


#################################
####### prism element api calls
#################################

- name: assigning Nutanix variables
  set_fact:
    element_base_url: "https://{{ cluster_ip }}:{{ nutanix_port }}/api/nutanix/v2.0"

# adding nic to VM
- name: add NIC to VM
  uri:
    url: "{{ element_base_url }}/vms/{{ new_vm_uuid }}/nics/"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 201
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
    body:
      spec_list:
      - network_uuid: "{{ vlan_uuid }}"
    body_format: json
  register: add_nic_task_result


- name: debug add_nic_task_result
  debug:
    msg:
    - "add_nic_task_result: {{ ( add_nic_task_result.content | from_json )['task_uuid'] }}"

- name: debug add_nic_task_result
  set_fact:
    add_nic_task_result: "{{ ( add_nic_task_result.content | from_json )['task_uuid'] }}"

- name: create image
  uri:
    url: "{{ element_base_url }}/images"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 201
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    body:
      name: "{{ vm_name }}-sysprep"
      image_type: ISO_IMAGE
    body_format: json
  register: create_image

# - name: debug create_image
  # debug:
    # msg: "{{ (create_image.content|from_json)['task_uuid'] }}"

- name: set fact new image task uuid
  set_fact:
    new_image_task_uuid: "{{ (create_image.content|from_json)['task_uuid'] }}"

- name: Poll for task new_image_task_uuid
  uri:
    url: "{{ element_base_url }}/tasks/poll"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 201
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    body:
      completed_tasks:
      - "{{ new_image_task_uuid }}"
    body_format: json
  register: image_task_complete

- name: set new_image_entity_uuid
  set_fact:
    new_image_uuid: "{{ (image_task_complete.content|from_json)['completed_tasks_info'][0]['entity_list'][0]['entity_id'] }}"

- name: upload image iso from local drive
  command: 'curl -i -k -u "{{ nutanix_user }}":"{{ nutanix_pw }}" -X PUT -H "X-Nutanix-Destination-Container: "{{ storage_container }}"" -H "Content-Type: application/octet-stream" -H "Accept: application/json" -T {{ ansible_env.HOME }}/ix-ansible/roles/vm_customize/files/win/{{ vm_name }}-template.iso ""{{ upload_base_url }}"/api/nutanix/v0.8/images/"{{ new_image_uuid }}"/upload"'
  register: iso_upload

- name: debug iso_upload register
  debug:
    msg:
    - "iso_upload: {{ iso_upload }}"


- name: setting pause to wait for upload
  pause:
    seconds: 5

- name: get vm_disk_id
  uri:
    url: "{{ element_base_url }}/images/{{ new_image_uuid }}"
    validate_certs: no
    force_basic_auth: yes
    method: GET
    status_code: 200
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
  register: new_image_info

- name: debugging the register of new_image_info
  debug:
    msg: "{{ (new_image_info.content|from_json) }}"

- name: set fact VM disk uuid
  set_fact:
    new_vm_disk_uuid: "{{ (new_image_info.content|from_json)['vm_disk_id'] }}"
    delete_image: "{{ (new_image_info.content|from_json)['uuid'] }}"

- name: debugging new_vm_disk_uuid
  debug:
    msg:
    - "Here is the new_vm_disk_uuid: {{ new_vm_disk_uuid }}"
    - "delete_image - UUID: {{ delete_image }}"

- name: setting pause to stop
  pause:
    seconds: 1

- name: create cdrom from image
  uri:
    url: "{{ element_base_url }}/vms/{{ new_vm_uuid }}/disks/attach"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 201
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    body:
      vm_disks:
      - disk_address:
          device_bus: IDE
        is_cdrom: true
        is_empty: false
        vm_disk_clone:
          disk_address:
            vmdisk_uuid: "{{ new_vm_disk_uuid }}"
        # storage_container_uuid: "{{ storage_container }}"
    body_format: json
  register: create_cd_from_image

- name: debug create_cd_from_image
  debug:
    msg:
    - "create_cd_from_image: {{ create_cd_from_image }}"

- name: delete image
  uri:
    url: "{{ element_base_url }}/images/{{ delete_image }}"
    validate_certs: no
    force_basic_auth: yes
    method: DELETE
    status_code: 201
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Accept: "application/json"
  register: delete_image_register

- name: delete_image_register
  debug:
    msg:
    - "delete_image_register: {{ delete_image_register }}"

- name: Poll for task delete_image
  uri:
    url: "{{ element_base_url }}/tasks/poll"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 201
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    body:
      completed_tasks:
      - "{{ (delete_image_register.content|from_json)['task_uuid'] }}"
    body_format: json
  register: delete_task_complete

- name: delete_task_complete
  debug:
    msg:
    - "delete_task_complete: {{ delete_task_complete }}"


- name: start VM
  uri:
    url: "{{ element_base_url }}/vms/{{ new_vm_uuid }}/set_power_state"
    validate_certs: no
    force_basic_auth: yes
    method: POST
    status_code: 201
    user: "{{ nutanix_user }}"
    password: "{{ nutanix_pw }}"
    return_content: yes
    body:
        transition: 'ON'
    body_format: json
  register: start_result

- name: Return status
  debug:
    msg: "{{ (start_result.content|from_json) }}"

# - name: pause for coffee
  # pause:
    # seconds: 45




